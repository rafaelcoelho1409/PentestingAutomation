import luigi
import subprocess
import os


#---AUXILIARY FUNCTIONS---
def reconnaissance(domains, folder, action):
    return [
        "./reconnaissance.sh", 
        "-d", domains, 
        "-f", folder, 
        "-a", action
    ]

def nuclei_scan(folder, action):
    return [
        "./nuclei_scan.sh",
        "-f", folder,
        "-a", action
    ]

def vulnerabilities(folder, action):
    return [
        "./vulnerabilities.sh",
        "-f", folder,
        "-a", action
    ]

def nikto_scan(folder, action):
    return [
        "./nikto_scan.sh",
        "-f", folder,
        "-a", action
    ]

def fingerprint(folder, action):
    return [
        "./fingerprint.sh",
        "-f", folder,
        "-a", action
    ]
#-------------------------

#---EXECUTION---
class ArgsTask(luigi.Task):
    folder = luigi.Parameter()
    domains = luigi.Parameter()
    def run(self):
        os.makedirs(f"{self.folder}/LuigiOutputs", exist_ok = True)
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")

#--------------------------
#>>>---RECONNAISSANCE---<<<
#--------------------------
class SUBFINDER(ArgsTask):
    def run(self):
        subprocess.run(
            reconnaissance(
                self.domains, 
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return ArgsTask(
            folder = self.folder,
            domains = self.domains
        )

class WAYBACKURLS(ArgsTask):
    def run(self):
        subprocess.run(
            reconnaissance(
                self.domains, 
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def requires(self):
        return SUBFINDER(
            folder = self.folder,
            domains = self.domains
        )
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")

class HTTPX(ArgsTask):
    def run(self):
        subprocess.run(
            reconnaissance(
                self.domains, 
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def requires(self):
        return SUBFINDER(
            folder = self.folder,
            domains = self.domains
        )
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")

class DNSREAPER(ArgsTask):
    def run(self):
        subprocess.run(
            reconnaissance(
                self.domains, 
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def requires(self):
        return SUBFINDER(
            folder = self.folder,
            domains = self.domains
        )
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")

class DNSX(ArgsTask):
    def run(self):
        subprocess.run(
            reconnaissance(
                self.domains, 
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def requires(self):
        return SUBFINDER(
            folder = self.folder,
            domains = self.domains
        )
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")

class API_DISCOVERY(ArgsTask):
    def run(self):
        subprocess.run(
            reconnaissance(
                self.domains, 
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def requires(self):
        return HTTPX(
            folder = self.folder,
            domains = self.domains
        )
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")

class BRUTEFORCE_SUBDOMAINS(ArgsTask):
    def run(self):
        subprocess.run(
            reconnaissance(
                self.domains, 
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def requires(self):
        return HTTPX(
            folder = self.folder,
            domains = self.domains
        )
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")

class DIRECTORIES(ArgsTask):
    def run(self):
        subprocess.run(
            reconnaissance(
                self.domains, 
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def requires(self):
        return BRUTEFORCE_SUBDOMAINS(
            folder = self.folder,
            domains = self.domains
        )
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")

class KATANA(ArgsTask):
    def run(self):
        subprocess.run(
            reconnaissance(
                self.domains, 
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def requires(self):
        return DIRECTORIES(
            folder = self.folder,
            domains = self.domains
        )
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")

class FINAL_DATA_VERSION(ArgsTask):
    def run(self):
        subprocess.run(
            reconnaissance(
                self.domains, 
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def requires(self):
        return [
            WAYBACKURLS(
                folder = self.folder,
                domains = self.domains
            ),
            API_DISCOVERY(
                folder = self.folder,
                domains = self.domains
            ),
            KATANA(
                folder = self.folder,
                domains = self.domains
            )
        ]
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")


#-----------------------
#>>>---FINGERPRINT---<<<
#-----------------------
class FINGERPRINT(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def requires(self):
        return HTTPX(
            folder = self.folder,
            domains = self.domains
        )
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")

class B01_FINGERPRINT(ArgsTask):
    def run(self):
        subprocess.run(
            fingerprint(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def requires(self):
        return FINGERPRINT(
            folder = self.folder,
            domains = self.domains
        )
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")

class A12_NIKTO_SOFTWARE_IDENTIFICATION(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return FINGERPRINT(
            folder = self.folder,
            domains = self.domains
        )

class NAABU(ArgsTask):
    def run(self):
        subprocess.run(
            reconnaissance(
                self.domains, 
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def requires(self):
        return FINGERPRINT(
            folder = self.folder,
            domains = self.domains
        )
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")

class NMAP(ArgsTask):
    def run(self):
        subprocess.run(
            reconnaissance(
                self.domains, 
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def requires(self):
        return NAABU(
            folder = self.folder,
            domains = self.domains
        )
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")

class B02_SHORTSCAN(ArgsTask):
    def run(self):
        subprocess.run(
            fingerprint(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def requires(self):
        return B01_FINGERPRINT(
            folder = self.folder,
            domains = self.domains
        )
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")

class END_A(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return [
            NMAP(folder = self.folder, domains = self.domains),
            DNSREAPER(folder = self.folder, domains = self.domains),
            DNSX(folder = self.folder, domains = self.domains),
            A12_NIKTO_SOFTWARE_IDENTIFICATION(folder = self.folder, domains = self.domains),
            B02_SHORTSCAN(folder = self.folder, domains = self.domains),
        ]

#--------------------
#>>>---CLUSTER1---<<<
#--------------------
class CLUSTER1(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return [
            FINAL_DATA_VERSION(folder = self.folder,domains = self.domains),
            END_A(folder = self.folder, domains = self.domains),
        ]

class V02_HOST_HEADER_INJECTION(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER1(
            folder = self.folder,
            domains = self.domains
        )

class V05_API(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER1(
            folder = self.folder,
            domains = self.domains
        )

class V19_TEMPLATE_INJECTION(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER1(
            folder = self.folder,
            domains = self.domains
        )

class V23_INFORMATION_DISCLOSURE(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER1(
            folder = self.folder,
            domains = self.domains
        )

class V10_FILE_INCLUSION(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER1(
            folder = self.folder,
            domains = self.domains
        )

class V02_HOST_HEADER_INJECTION_FFUF(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V02_HOST_HEADER_INJECTION(
            folder = self.folder,
            domains = self.domains
        )

class N01_NUCLEI_API(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V05_API(
            folder = self.folder,
            domains = self.domains
        )

class N01_NUCLEI_GRAPHQL(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V05_API(
            folder = self.folder,
            domains = self.domains
        )

class V05_API_GRAPHQL_ENDPOINTS(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V05_API(
            folder = self.folder,
            domains = self.domains
        )

class V05_API_GOCTOPUS(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V05_API_GRAPHQL_ENDPOINTS(
            folder = self.folder,
            domains = self.domains
        )

class V05_API_GRAPHW00F(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V05_API_GRAPHQL_ENDPOINTS(
            folder = self.folder,
            domains = self.domains
        )

class A14_NIKTO_WEBSERVICE(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V05_API(
            folder = self.folder,
            domains = self.domains
        )

class N13_NUCLEI_TEMPLATE_INJECTION(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V19_TEMPLATE_INJECTION(
            folder = self.folder,
            domains = self.domains
        )

class V19_TEMPLATE_INJECTION_TINJA(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V19_TEMPLATE_INJECTION(
            folder = self.folder,
            domains = self.domains
        )

class A03_NIKTO_INFORMATION_DISCLOSURE(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V23_INFORMATION_DISCLOSURE(
            folder = self.folder,
            domains = self.domains
        )

class V23_INFO_DISC_DIRB_FFUF(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V23_INFORMATION_DISCLOSURE(
            folder = self.folder,
            domains = self.domains
        )

class N06_NUCLEI_FILE_INCLUSION(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V10_FILE_INCLUSION(
            folder = self.folder,
            domains = self.domains
        )

class A10_NIKTO_FILE_UPLOAD(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V10_FILE_INCLUSION(
            folder = self.folder,
            domains = self.domains
        )

class A13_NIKTO_REMOTE_SOURCE_INCLUSION(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V10_FILE_INCLUSION(
            folder = self.folder,
            domains = self.domains
        )

#--------------------
#>>>---CLUSTER2---<<<
#--------------------
class CLUSTER2(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return [
            V02_HOST_HEADER_INJECTION_FFUF(folder = self.folder, domains = self.domains),
            N01_NUCLEI_API(folder = self.folder, domains = self.domains),
            N01_NUCLEI_GRAPHQL(folder = self.folder, domains = self.domains),
            V05_API_GOCTOPUS(folder = self.folder, domains = self.domains),
            V05_API_GRAPHW00F(folder = self.folder, domains = self.domains),
            N13_NUCLEI_TEMPLATE_INJECTION(folder = self.folder, domains = self.domains),
            V19_TEMPLATE_INJECTION_TINJA(folder = self.folder, domains = self.domains),
            A03_NIKTO_INFORMATION_DISCLOSURE(folder = self.folder, domains = self.domains),
            V23_INFO_DISC_DIRB_FFUF(folder = self.folder, domains = self.domains),
            N06_NUCLEI_FILE_INCLUSION(folder = self.folder, domains = self.domains),
            A10_NIKTO_FILE_UPLOAD(folder = self.folder, domains = self.domains),
            A14_NIKTO_WEBSERVICE(folder = self.folder, domains = self.domains),
            A13_NIKTO_REMOTE_SOURCE_INCLUSION(folder = self.folder, domains = self.domains),
        ]

class V01_CORS(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER2(
            folder = self.folder,
            domains = self.domains
        )

class V03_CSRF(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER2(
            folder = self.folder,
            domains = self.domains
        )

class V04_REQUEST_SMUGGLING(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER2(
            folder = self.folder,
            domains = self.domains
        )

class V20_SSRF(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER2(
            folder = self.folder,
            domains = self.domains
        )

class V18_XSS(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER2(
            folder = self.folder,
            domains = self.domains
        )

class V22_SQL_INJECTION(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER2(
            folder = self.folder,
            domains = self.domains
        )

class V01_CORS_MISCONFIGURATION_SPYHUNT(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V01_CORS(
            folder = self.folder,
            domains = self.domains
        )

class V01_CORS_CORSY(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V01_CORS(
            folder = self.folder,
            domains = self.domains
        )

class V03_CSRF_XSRFPROBE(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V03_CSRF(
            folder = self.folder,
            domains = self.domains
        )

class V04_REQUEST_SMUGGLING_SMUGGLEFUZZ(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V04_REQUEST_SMUGGLING(
            folder = self.folder,
            domains = self.domains
        )

class N14_NUCLEI_SSRF(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V20_SSRF(
            folder = self.folder,
            domains = self.domains
        )

class V20_SSRF_SURF(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V20_SSRF(
            folder = self.folder,
            domains = self.domains
        )

class N12_NUCLEI_XSS(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V18_XSS(
            folder = self.folder,
            domains = self.domains
        )

class V18_XSS_GXSS(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V18_XSS(
            folder = self.folder,
            domains = self.domains
        )

class V18_XSS_DALFOX(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V18_XSS_GXSS(
            folder = self.folder,
            domains = self.domains
        )

class V18_XSS_XSSTRIKE(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V18_XSS_GXSS(
            folder = self.folder,
            domains = self.domains
        )

class A04_NIKTO_INJECTION(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V18_XSS(
            folder = self.folder,
            domains = self.domains
        )

class N15_NUCLEI_SQL_INJECTION(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V22_SQL_INJECTION(
            folder = self.folder,
            domains = self.domains
        )

class V22_SQL_INJECTION_GHAURI(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V22_SQL_INJECTION(
            folder = self.folder,
            domains = self.domains
        )

class A09_NIKTO_SQL_INJECTION(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V22_SQL_INJECTION(
            folder = self.folder,
            domains = self.domains
        )


#--------------------
#>>>---CLUSTER3---<<<
#--------------------
class CLUSTER3(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return [
            V01_CORS_MISCONFIGURATION_SPYHUNT(folder = self.folder, domains = self.domains),
            V01_CORS_CORSY(folder = self.folder, domains = self.domains),
            V03_CSRF_XSRFPROBE(folder = self.folder, domains = self.domains),
            V04_REQUEST_SMUGGLING_SMUGGLEFUZZ(folder = self.folder, domains = self.domains),
            N14_NUCLEI_SSRF(folder = self.folder, domains = self.domains),
            V20_SSRF_SURF(folder = self.folder, domains = self.domains),
            N12_NUCLEI_XSS(folder = self.folder, domains = self.domains),
            V18_XSS_DALFOX(folder = self.folder, domains = self.domains),
            V18_XSS_XSSTRIKE(folder = self.folder, domains = self.domains),
            N15_NUCLEI_SQL_INJECTION(folder = self.folder, domains = self.domains),
            V22_SQL_INJECTION_GHAURI(folder = self.folder, domains = self.domains),
            A03_NIKTO_SQL_INJECTION(folder = self.folder, domains = self.domains),
            A04_NIKTO_INJECTION(folder = self.folder, domains = self.domains),
        ]

class V06_OPEN_REDIRECT(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER3(
            folder = self.folder,
            domains = self.domains
        )

class V07_IDOR(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER3(
            folder = self.folder,
            domains = self.domains
        )

class V08_XXE(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER3(
            folder = self.folder,
            domains = self.domains
        )

class V09_RCE(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER3(
            folder = self.folder,
            domains = self.domains
        )

class V11_COOKIE(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER3(
            folder = self.folder,
            domains = self.domains
        )

class V12_OAUTH(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER3(
            folder = self.folder,
            domains = self.domains
        )

class V13_TAKEOVER(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER3(
            folder = self.folder,
            domains = self.domains
        )

class V14_TRAVERSAL(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER3(
            folder = self.folder,
            domains = self.domains
        )

class V15_CRLF_INJECTION(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER3(
            folder = self.folder,
            domains = self.domains
        )

class V16_403_BYPASS(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER3(
            folder = self.folder,
            domains = self.domains
        )

class V17_FAVICON(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER3(
            folder = self.folder,
            domains = self.domains
        )

class N02_NUCLEI_OPEN_REDIRECT(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V06_OPEN_REDIRECT(
            folder = self.folder,
            domains = self.domains
        )

class N03_NUCLEI_IDOR(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V07_IDOR(
            folder = self.folder,
            domains = self.domains
        )

class N04_NUCLEI_XXE(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V08_XXE(
            folder = self.folder,
            domains = self.domains
        )

class N05_NUCLEI_RCE(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V09_RCE(
            folder = self.folder,
            domains = self.domains
        )

class N07_NUCLEI_COOKIE(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V11_COOKIE(
            folder = self.folder,
            domains = self.domains
        )

class N08_NUCLEI_OAUTH(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V12_OAUTH(
            folder = self.folder,
            domains = self.domains
        )

class N09_NUCLEI_TAKEOVER(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V13_TAKEOVER(
            folder = self.folder,
            domains = self.domains
        )

class V13_TAKEOVER_SUBZY(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V13_TAKEOVER(
            folder = self.folder,
            domains = self.domains
        )

class V13_TAKEOVER_MX_SPF(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V13_TAKEOVER(
            folder = self.folder,
            domains = self.domains
        )

class N10_NUCLEI_TRAVERSAL(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V14_TRAVERSAL(
            folder = self.folder,
            domains = self.domains
        )

class N11_NUCLEI_CRLF_INJECTION(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V15_CRLF_INJECTION(
            folder = self.folder,
            domains = self.domains
        )

class V16_403_BYPASS_403JUMP(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V16_403_BYPASS(
            folder = self.folder,
            domains = self.domains
        )

class V17_FAVICON_FAVFREAK(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V17_FAVICON(
            folder = self.folder,
            domains = self.domains
        )

class V17_FAVICON_FAVIRECON(ArgsTask):
    def run(self):
        subprocess.run(
            vulnerabilities(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return V17_FAVICON(
            folder = self.folder,
            domains = self.domains
        )

#--------------------
#>>>---CLUSTER4---<<<
#--------------------
class CLUSTER4(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return [
            N02_NUCLEI_OPEN_REDIRECT(folder = self.folder, domains = self.domains),
            N03_NUCLEI_IDOR(folder = self.folder, domains = self.domains),
            N04_NUCLEI_XXE(folder = self.folder, domains = self.domains),
            N05_NUCLEI_RCE(folder = self.folder, domains = self.domains),
            N07_NUCLEI_COOKIE(folder = self.folder, domains = self.domains),
            N08_NUCLEI_OAUTH(folder = self.folder, domains = self.domains),
            N09_NUCLEI_TAKEOVER(folder = self.folder, domains = self.domains),
            V13_TAKEOVER_SUBZY(folder = self.folder, domains = self.domains),
            V13_TAKEOVER_MX_SPF(folder = self.folder, domains = self.domains),
            N10_NUCLEI_TRAVERSAL(folder = self.folder, domains = self.domains),
            N11_NUCLEI_CRLF_INJECTION(folder = self.folder, domains = self.domains),
            V16_403_BYPASS_403JUMP(folder = self.folder, domains = self.domains),
            V17_FAVICON_FAVFREAK(folder = self.folder, domains = self.domains),
            V17_FAVICON_FAVIRECON(folder = self.folder, domains = self.domains),
        ]

class N16_NUCLEI_HTTP_CNVD(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER4(
            folder = self.folder,
            domains = self.domains
        )

class N17_NUCLEI_HTTP_CVES(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER4(
            folder = self.folder,
            domains = self.domains
        )

class N18_NUCLEI_HTTP_DEFAULT_LOGINS(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER4(
            folder = self.folder,
            domains = self.domains
        )

class N19_NUCLEI_HTTP_EXPOSED_PANELS(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER4(
            folder = self.folder,
            domains = self.domains
        )

class N20_NUCLEI_HTTP_EXPOSURES(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER4(
            folder = self.folder,
            domains = self.domains
        )

class N21_NUCLEI_HTTP_MISCONFIGURATION(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER4(
            folder = self.folder,
            domains = self.domains
        )

class N22_NUCLEI_HTTP_TECHNOLOGIES(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER4(
            folder = self.folder,
            domains = self.domains
        )

class N23_NUCLEI_HTTP_VULNERABILITIES(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER4(
            folder = self.folder,
            domains = self.domains
        )

class N24_NUCLEI_JAVASCRIPT(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER4(
            folder = self.folder,
            domains = self.domains
        )

class N25_NUCLEI_SSL(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER4(
            folder = self.folder,
            domains = self.domains
        )

class N26_NUCLEI_DAST(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER4(
            folder = self.folder,
            domains = self.domains
        )

class N27_NUCLEI_HEADLESS(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER4(
            folder = self.folder,
            domains = self.domains
        )

class N28_NUCLEI_DNS(ArgsTask):
    def run(self):
        subprocess.run(
            nuclei_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER4(
            folder = self.folder,
            domains = self.domains
        )

#--------------------
#>>>---CLUSTER5---<<<
#--------------------
class CLUSTER5(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return [
            N16_NUCLEI_HTTP_CNVD(folder = self.folder, domains = self.domains),
            N17_NUCLEI_HTTP_CVES(folder = self.folder, domains = self.domains),
            N18_NUCLEI_HTTP_DEFAULT_LOGINS(folder = self.folder, domains = self.domains),
            N19_NUCLEI_HTTP_EXPOSED_PANELS(folder = self.folder, domains = self.domains),
            N20_NUCLEI_HTTP_EXPOSURES(folder = self.folder, domains = self.domains),
            N21_NUCLEI_HTTP_MISCONFIGURATION(folder = self.folder, domains = self.domains),
            N22_NUCLEI_HTTP_TECHNOLOGIES(folder = self.folder, domains = self.domains),
            N23_NUCLEI_HTTP_VULNERABILITIES(folder = self.folder, domains = self.domains),
            N24_NUCLEI_JAVASCRIPT(folder = self.folder, domains = self.domains),
            N25_NUCLEI_SSL(folder = self.folder, domains = self.domains),
            N26_NUCLEI_DAST(folder = self.folder, domains = self.domains),
            N27_NUCLEI_HEADLESS(folder = self.folder, domains = self.domains),
            N28_NUCLEI_DNS(folder = self.folder, domains = self.domains),
        ]

class A01_NIKTO_INTERESTING_FILES(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER5(
            folder = self.folder,
            domains = self.domains
        )

class A02_NIKTO_MISCONFIGURATION(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER5(
            folder = self.folder,
            domains = self.domains
        )

class A05_NIKTO_REMOTE_FILE_RETRIEVAL1(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER5(
            folder = self.folder,
            domains = self.domains
        )

class A06_NIKTO_DENIAL_OF_SERVICE(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER5(
            folder = self.folder,
            domains = self.domains
        )

class A07_NIKTO_REMOTE_FILE_RETRIEVAL2(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER5(
            folder = self.folder,
            domains = self.domains
        )

class A08_NIKTO_COMMAND_EXECUTION(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER5(
            folder = self.folder,
            domains = self.domains
        )

class A11_NIKTO_AUTHENTICATION_BYPASS(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER5(
            folder = self.folder,
            domains = self.domains
        )

class A15_NIKTO_ADMINISTRATIVE_CONSOLE(ArgsTask):
    def run(self):
        subprocess.run(
            nikto_scan(
                self.folder, 
                self.__class__.__name__))
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return CLUSTER5(
            folder = self.folder,
            domains = self.domains
        )

#---------------------------
#>>>---FINAL EXECUTION---<<<
#---------------------------
class END(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return [
            A01_NIKTO_INTERESTING_FILES(folder = self.folder, domains = self.domains),
            A02_NIKTO_MISCONFIGURATION(folder = self.folder, domains = self.domains),
            A05_NIKTO_REMOTE_FILE_RETRIEVAL1(folder = self.folder, domains = self.domains),
            A06_NIKTO_DENIAL_OF_SERVICE(folder = self.folder, domains = self.domains),
            A07_NIKTO_REMOTE_FILE_RETRIEVAL2(folder = self.folder, domains = self.domains),
            A08_NIKTO_COMMAND_EXECUTION(folder = self.folder, domains = self.domains),
            A11_NIKTO_AUTHENTICATION_BYPASS(folder = self.folder, domains = self.domains),
            A15_NIKTO_ADMINISTRATIVE_CONSOLE(folder = self.folder, domains = self.domains),
        ]

class RunAllTasks(ArgsTask):
    def run(self):
        # Create the done file
        with self.output().open('w') as out_file:
            out_file.write(f'{self.__class__.__name__} done')
    def output(self):
        return luigi.LocalTarget(
            f"{self.folder}/LuigiOutputs/{self.__class__.__name__}.done")
    def requires(self):
        return END(
            folder = self.folder,
            domains = self.domains
        )


if __name__ == '__main__':
    luigi.run()


#TO VISUALIZE LUIGI WORKFLOW
# - Open 2 terminals
#luigid (Terminal 1)
#python3 \
#   pentesting_luigi.py RunAllTasks \
#   --folder ~/PROJECTS/BancoBMG2 \
#   --domains ~/PROJECTS/BancoBMG2/wildcards.txt \
#   --scheduler-host localhost \
#   --workers 16 (Terminal 2)

