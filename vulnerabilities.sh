#!/bin/bash
optstring=":hf:a:"
export PATH=~/go/bin:~/.cargo/bin:$PATH
TOOLS_PATH=~/Tools
URLDEDUPE=~/Tools/urldedupe/urldedupe

#---AUXILIARY FUNCTIONS---
help_function() {
    echo "
    VULNERABILITIES (V)

    Args:
        Warning: Use only folder name without spacebar
        [-f] Folder to store all data from vulnerability scan
        [-a] Choose a specific task to be done
            Options:
            - V01_CORS_MISCONFIGURATION_SPYHUNT
            - V01_CORS_CORSY
            - V02_HOST_HEADER_INJECTION_FFUF
            - V02_HOST_HEADER_INJECTION_SPYHUNT
            - V02_HOST_HEADER_INJECTION_HEADI
            - V03_CSRF_XSRFPROBE
            - V04_REQUEST_SMUGGLING_SMUGGLER
            - V04_REQUEST_SMUGGLING_SMUGGLEFUZZ
            - V05_API_GRAPHQL_ENDPOINTS
            - V05_API_GOCTOPUS
            - V05_API_GRAPHW00F
            - V05_API_ARJUN
            - V13_TAKEOVER_SUBZY
            - V13_TAKEOVER_MX_SPF
            - V16_403_BYPASS_TOOL
            - V16_403_BYPASS_403JUMP
            - V17_FAVICON_FAVFREAK
            - V17_FAVICON_FAVIRECON
            - V18_XSS_DALFOX
            - V18_XSS_XSSTRIKE
            - V18_XSS_GXSS
            - V19_TEMPLATE_INJECTION_TINJA
            - V19_TEMPLATE_INJECTION_SSTIMAP
            - V20_SSRF_SURF
            - V21_HIDDEN_PARAMETERS_FFUF
            - V21_HIDDEN_PARAMETERS_ARJUN
            - V21_HIDDEN_PARAMETERS_X8
            - V22_SQL_INJECTION_GHAURI
            - V22_SQL_INJECTION_SQLMAP
            - V23_INFO_DISC_DIRB_FFUF
            - TEMPLATE_INJECTION_SSTIMAP
            - SSRF_SEE_SURF
        [-h] Help"
    exit 0
}   

run_task() {
    if [[ -n ${folder_init} ]]; then
        ${1}
        exit 0
    else
        echo "Error while running task ${2}"
        exit 1
    fi
}

banner() {
    printf '%*s' 100 | tr ' ' '-'
    echo -e "\n"
    echo -e "${1}\n"
    printf '%*s' 100 | tr ' ' '-'
    echo -e "\n"
}


#---MAIN FUNCTIONS---
V01_CORS_MISCONFIGURATION_SPYHUNT() {
    stage="V01_CORS_MISCONFIGURATION_SPYHUNT"
    banner "VULNERABILITIES - ${stage}"
    source ${TOOLS_PATH}/virtual_environments/spyhunt_env/bin/activate
    cd ${TOOLS_PATH}/spyhunt
    if [[ ! -d "${folder}/V01_cors" ]]; then
        mkdir -p "${folder}/V01_cors"
    fi
    if [[ -e "${rec_folder}/final_data/final_data_httpx_urls_noext.txt" ]]; then
        python3 spyhunt.py \
            -co "${rec_folder}/final_data/final_data_httpx_urls_noext.txt" | \
            tee -a "${folder}/V01_cors/_spyhunt.txt"
        cat "${folder}/V01_cors/_spyhunt.txt" \
            | grep -v "Connection error" \
            | grep -v "Error occurred" \
            | grep -v "NOT VULNERABLE" \
            | grep "VULNERABLE" \
            > "${folder}/V01_cors/spyhunt.txt"
        rm "${folder}/V01_cors/_spyhunt.txt"
    fi
    deactivate
}

V01_CORS_CORSY() {
    stage="V01_CORS_CORSY"
    banner "VULNERABILITIES - ${stage}"
    source ${TOOLS_PATH}/virtual_environments/corsy_env/bin/activate
    cd ${TOOLS_PATH}/Corsy
    if [[ ! -d "${folder}/V01_cors" ]]; then
        mkdir -p "${folder}/V01_cors"
    fi
    if [[ -e "${rec_folder}/final_data/final_data_httpx_urls_noext.txt" ]]; then
        for subdomain in $(\
            cat "${rec_folder}/final_data/final_data_httpx_urls_noext.txt"); do
            python3 corsy.py \
                -u ${subdomain} \
                -t 1000
        done | tee -a "${folder}/V01_cors/_corsy.txt"
        cat "${folder}/V01_cors/_corsy.txt" \
            | sed -r 's/\x1B\[[0-9;]*[mK]//g' \
            | awk "NF" \
            | grep -v "No misconfigurations found" \
            | grep -v '^[0-9]\+:' \
            | grep -v '{v1.0-beta}' \
            > ~/PROJECTS/ProductBoard/Vulnerabilities/V01_cors/corsy.txt
        rm "${folder}/V01_cors/_corsy.txt"
    fi
    deactivate
}

V02_HOST_HEADER_INJECTION_FFUF() {
    stage="V02_HOST_HEADER_INJECTION_FFUF"
    banner "VULNERABILITIES - ${stage}" 
    if [[ ! -d "${folder}/V02_host_header_injection" ]]; then
        mkdir -p "${folder}/V02_host_header_injection"
    fi
    if [[ -e "${rec_folder}/final_data/final_data_httpx_4XX.txt" ]]; then
        ffuf \
            -w ${TOOLS_PATH}/fuzzers/host_header_injection1.txt:HHI1 \
            -w ${TOOLS_PATH}/fuzzers/host_header_injection2.txt:HHI2 \
            -w ${rec_folder}/final_data/final_data_httpx_4XX.txt:URL \
            -u URL \
            -H "HHI1: HHI2" \
            -fc 403,404,301 \
            -t 1000 \
            -s \
            -ignore-body \
            -timeout 5 \
            -o "${folder}/V02_host_header_injection/_ffuf.txt"
        cat "${folder}/V02_host_header_injection/_ffuf.txt" \
            | jq ".results[].url" \
            | tr -d '"' \
            >> "${folder}/V02_host_header_injection/ffuf.txt"
        rm "${folder}/V02_host_header_injection/_ffuf.txt"
    fi
}

V02_HOST_HEADER_INJECTION_SPYHUNT() {
    stage="V02_HOST_HEADER_INJECTION_SPYHUNT"
    banner "VULNERABILITIES - ${stage}"
    source ${TOOLS_PATH}/virtual_environments/spyhunt_env/bin/activate
    cd ${TOOLS_PATH}/spyhunt
    if [[ ! -d "${folder}/V02_host_header_injection" ]]; then
        mkdir -p "${folder}/V02_host_header_injection"
    fi
    if [[ -e "${rec_folder}/final_data/final_data_httpx_urls_noext.txt" ]]; then
        python3 spyhunt.py \
            -hh "${rec_folder}/final_data/final_data_httpx_urls_noext.txt" | \
            tee -a "${folder}/V02_host_header_injection/_spyhunt.txt"
        cat "${folder}/V02_host_header_injection/_spyhunt.txt" \
            | grep -v "Error occurred" \
            | grep -v "No Detection" \
            | grep "POSSIBLE" | awk '{ print $10 }' \
            > "${folder}/V02_host_header_injection/spyhunt.txt"
        rm "${folder}/V02_host_header_injection/_spyhunt.txt"
    fi
    deactivate
}

V02_HOST_HEADER_INJECTION_HEADI() {
    stage="V02_HOST_HEADER_INJECTION_HEADI"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V02_host_header_injection" ]]; then
        mkdir -p "${folder}/V02_host_header_injection"
    fi
    if [[ -e "${rec_folder}/final_data/final_data_httpx_urls_noext.txt" ]]; then
        for subdomain in $(\
            cat "${rec_folder}/final_data/final_data_httpx_urls_noext.txt"); do
            headi -u ${subdomain} \
                | tee -a "${folder}/V02_host_header_injection/headi.txt"
        done
    fi
}

V03_CSRF_XSRFPROBE() {
    #XSRFROBE INSTALLATION NOT WORKING AT SEPTEMBER 19TH 2024
    stage="V03_CSRF_XSRFPROBE"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V03_csrf" ]]; then
        mkdir -p "${folder}/V03_csrf"
    fi
    if [[ -e "${rec_folder}/subdomains/subdomains_probe.txt" ]]; then
        for subdomain in $(\
            cat "${rec_folder}/subdomains/subdomains_probe.txt"); do
            subdomain_txt=$(echo "${subdomain}" | \
                sed -e 's|^http://||' -e 's|^https://||')
            banner ${subdomain}
            xsrfprobe \
                -u ${subdomain} \
                --crawl \
                -o "${folder}/V03_csrf/${subdomain_txt}"
        done | tee -a "${folder}/V03_csrf/xsrfprobe.txt"
        for folder_ in $(ls "${folder}/V03_csrf" -l | awk '/^d/ {print $9}'); do
            if [[ -z $(ls -A "${folder}/V03_csrf/${folder_}") ]]; then
                rm -r "${folder}/V03_csrf/${folder_}"
            fi
        done
        rm -r xsrfprobe-output
    fi
}

V04_REQUEST_SMUGGLING_SMUGGLER() {
    stage="V04_REQUEST_SMUGGLING_SMUGGLER"
    banner "VULNERABILITIES - ${stage}"
    source ${TOOLS_PATH}/virtual_environments/smuggler_env/bin/activate
    cd ${TOOLS_PATH}/smuggler
    if [[ ! -d "${folder}/V04_request_smuggling" ]]; then
        mkdir -p "${folder}/V04_request_smuggling"
    fi
    if [[ -e "${rec_folder}/subdomains/subdomains_probe.txt" ]]; then
        for subdomain in $(\
            cat "${rec_folder}/subdomains/subdomains_probe.txt"); do
            python3 smuggler.py \
                --help
                #-u ${subdomain}
        done #| tee -a "${folder}/V04_request_smuggling/smmuggler.txt"
    fi
    deactivate
}

V04_REQUEST_SMUGGLING_SMUGGLEFUZZ() {
    stage="V04_REQUEST_SMUGGLING_SMUGGLEFUZZ"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V04_request_smuggling" ]]; then
        mkdir -p "${folder}/V04_request_smuggling"
    fi
    if [[ -e "${rec_folder}/final_data/final_data_httpx_4XX.txt" ]]; then
        for x in $(\
            cat "${rec_folder}/final_data/final_data_httpx_4XX.txt"); do
            echo "SMUGGLEFUZZ: ${x}"
            smugglefuzz scan \
                -u ${x} \
                -t 1000 \
                -c \
                | tee -a "${folder}/V04_request_smuggling/smugglefuzz.txt"
        done
    fi
}

V05_API_GRAPHQL_ENDPOINTS() {
    stage="V05_API_GRAPHQL_ENDPOINTS"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V05_api/graphql" ]]; then
        mkdir -p "${folder}/V05_api/graphql"
    fi
    if [[ -e "${rec_folder}/subdomains/subdomains_probe.txt" ]]; then
        for subdomain in $(\
            cat "${rec_folder}/httpx.txt" \
                | sed -r 's/\x1B\[[0-9;]*[mK]//g' \
                | grep -v "FAILED" \
                | grep -E '\[2[0-9]{2}\]|\[3(0[2-9]|[1-9][0-9])\]' \
                | awk '{ print $1 }'); do
            subdomain_txt=$(echo "${subdomain}" | \
                sed -e 's|^http://||' -e 's|^https://||')
            bruteforce_wordlist="${TOOLS_PATH}/SecLists/Discovery/Web-Content/graphql.txt"
            ffuf \
                -u ${subdomain}/FUZZ \
                -w ${bruteforce_wordlist} \
                -t 1000 \
                -s \
                -ignore-body \
                -timeout 5 \
                -fc 404,403,400,503,401,429,301,302,500,204 \
                -o "${folder}/V05_api/graphql/bruteforce_${subdomain_txt}.txt"
            cat "${folder}/V05_api/graphql/bruteforce_${subdomain_txt}.txt" \
                | jq ".results[].url" \
                | tr -d '"' \
                >> "${folder}/V05_api/graphql/_graphql_endpoints.txt"
            results=$(cat "${folder}/V05_api/graphql/_graphql_endpoints.txt" | grep ${subdomain} | wc -l)
            total_words=$(cat ${bruteforce_wordlist} | wc -l)
            percentage=$(python3 -c 'percentage='${results}'/'${total_words}'; print(f"{percentage*100:.2f}")')
            delete=$(python3 -c 'print('${percentage}' > 50.0)')
            if [[ ${delete} == 'True' ]]; then
                echo "${subdomain}: remove results"
            else
                cat "${folder}/V05_api/graphql/_graphql_endpoints.txt" \
                    >> "${folder}/V05_api/graphql/graphql_endpoints.txt"
                echo "${subdomain}: maintain results"   
            fi
            rm "${folder}/V05_api/graphql/_graphql_endpoints.txt"
            rm "${folder}/V05_api/graphql/bruteforce_${subdomain_txt}.txt"
        done
        cat "${rec_folder}/final_data/final_data_httpx_urls.txt" \
            | grep "graphql" \
            >> "${folder}/V05_api/graphql/graphql_endpoints.txt"
        cat "${rec_folder}/api_discovery.txt" \
            | grep "graphql" \
            >> "${folder}/V05_api/graphql/graphql_endpoints.txt"
    fi
}

V05_API_GOCTOPUS() {
    stage="V05_API_GOCTOPUS"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V05_api/graphql" ]]; then
        mkdir -p "${folder}/V05_api/graphql"
    fi
    if [[ -e "${folder}/V05_api/graphql/graphql_endpoints.txt" ]]; then
        goctopus \
            -f "${folder}/V05_api/graphql/graphql_endpoints.txt" \
            -a \
            -w 1000 \
            -o "${folder}/V05_api/graphql/goctopus_status.txt"
        cat "${folder}/V05_api/graphql/goctopus_status.txt" \
            | jq ".url" \
            | tr -d '"' \
            > "${folder}/V05_api/graphql/goctopus.txt"
    fi
}

V05_API_GRAPHW00F() {
    stage="V05_API_GRAPHW00F"
    banner "VULNERABILITIES - ${stage}"
    source ${TOOLS_PATH}/virtual_environments/graphw00f_env/bin/activate
    cd ${TOOLS_PATH}/graphw00f
    if [[ ! -d "${folder}/V05_api/graphql" ]]; then
        mkdir -p "${folder}/V05_api/graphql"
    fi
    if [[ -e "${folder}/V05_api/graphql/graphql_endpoints.txt" ]]; then
        for subdomain in $(\
            cat "${folder}/V05_api/graphql/graphql_endpoints.txt"); do
            subdomain_txt=$(echo "${subdomain}" | \
                sed -e 's|^http://||' -e 's|^https://||')
            yes n | python3 main.py \
                -f \
                -t ${subdomain}
        done | tee -a "${folder}/V05_api/graphql/_graphw00f.txt"
        cat "${folder}/V05_api/graphql/_graphw00f.txt" \
            | grep -E "Checking|Found|Discovered|Attack Surface|Technologies|Homepage" \
            > "${folder}/V05_api/graphql/graphw00f.txt"
        rm "${folder}/V05_api/graphql/_graphw00f.txt"
    fi
    deactivate
}

V05_API_ARJUN() {
    stage="V05_API_ARJUN"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V05_api" ]]; then
        mkdir -p "${folder}/V05_api"
    fi
    if [[ -e "${rec_folder}/api_discovery.txt" ]]; then
        python3 -m arjun \
            -i "${rec_folder}/api_discovery.txt" \
            -t 1000 \
            -w "${TOOLS_PATH}/SecLists/Discovery/Web-Content/burp-parameter-names.txt" \
            -oT "${folder}/V05_api/arjun.txt"
    fi
}

V13_TAKEOVER_SUBZY() {
    stage="V13_TAKEOVER_SUBZY"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V13_takeover" ]]; then
        mkdir -p "${folder}/V13_takeover"
    fi
    if [[ -e "${rec_folder}/subdomains/subdomains_probe.txt" ]]; then
        subzy run \
            --targets "${rec_folder}/subdomains/subdomains_probe.txt" \
            --concurrency 1000 \
            --hide_fails \
            --vuln \
            --output "${folder}/V13_takeover/subzy.json"
    fi
}

V13_TAKEOVER_MX_SPF() {
    stage="V13_TAKEOVER_MX_SPF"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V13_takeover" ]]; then
        mkdir -p "${folder}/V13_takeover"
    fi
    if [[ -e "${rec_folder}/subdomains/subdomains_probe.txt" ]]; then
        cat "${rec_folder}/subdomains/subdomains_probe.txt" \
            | mx-spf-takeover \
                -check-whois \
                -w 100 \
                -v \
                -output "${folder}/V13_takeover/mx_spf_takeover.json"
    fi
}

V16_403_BYPASS_TOOL() {
    stage="V16_403_BYPASS_TOOL"
    banner "VULNERABILITIES - ${stage}"
    cd ${TOOLS_PATH}/4-ZERO-3
    if [[ ! -d "${folder}/V16_403_bypass" ]]; then
        mkdir -p "${folder}/V16_403_bypass"
    fi
    if [[ -e "${rec_folder}/final_data/final_data_httpx_403.txt" ]]; then
        for subdomain in $(\
            cat "${rec_folder}/final_data/final_data_httpx_403.txt"); do
            echo "403 BYPASS: ${subdomain}"
            subdomain_txt=$(echo "${subdomain}" | \
                sed -e 's|^http://||' -e 's|^https://||')
            ./403-bypass.sh -u ${subdomain} --exploit 
        done | tee -a "${folder}/V16_403_bypass/403bypass.txt"
    fi    
}

V16_403_BYPASS_403JUMP() {
    stage="V16_403_BYPASS_403JUMP"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V16_403_bypass" ]]; then
        mkdir -p "${folder}/V16_403_bypass"
    fi
    if [[ -e "${rec_folder}/final_data/final_data_httpx_4XX.txt" ]]; then
        403jump \
            -f "${rec_folder}/final_data/final_data_httpx_4XX.txt" \
            -timeout 5 \
            | tee -a "${folder}/V16_403_bypass/403jump.txt"
    fi
}

V17_FAVICON_FAVFREAK() {
    stage="V17_FAVICON_FAVFREAK"
    banner "VULNERABILITIES - ${stage}"
    source ${TOOLS_PATH}/virtual_environments/favfreak_env/bin/activate
    cd ${TOOLS_PATH}/FavFreak
    if [[ ! -d "${folder}/V17_favicon/favfreak" ]]; then
        mkdir -p "${folder}/V17_favicon/favfreak"
    fi
    if [[ -e "${rec_folder}/final_data/final_data_httpx_urls.txt" ]]; then
        cat "${rec_folder}/final_data/final_data_httpx_urls.txt" | \
            python3 favfreak.py -o "${folder}/V17_favicon/favfreak"
    fi
    deactivate
}

V17_FAVICON_FAVIRECON() {
    stage="V17_FAVICON_FAVIRECON"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V17_favicon" ]]; then
        mkdir -p "${folder}/V17_favicon"
    fi
    if [[ -e "${rec_folder}/final_data/final_data_httpx_urls.txt" ]]; then
        favirecon \
            -l "${rec_folder}/final_data/final_data_httpx_urls.txt" \
            -c 1000 \
            -o "${folder}/V17_favicon/favirecon.txt"
    fi 
}

V18_XSS_GXSS() {
    stage="V18_XSS_GXSS"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V18_xss" ]]; then
        mkdir -p "${folder}/V18_xss"
    fi
    if [[ -e "${rec_folder}/requests_with_parameters.txt" ]]; then
        cat "${rec_folder}/requests_with_parameters.txt" \
            | Gxss -c 2500 -p FUZZ -v -o "${folder}/V18_xss/gxss.txt" 
        for url in $(\
            cat "${folder}/V18_xss/gxss.txt"); do
            ffuf \
                -w ${TOOLS_PATH}/SecLists/Fuzzing/XSS/robot-friendly/XSS-BruteLogic.txt:FUZZ \
                -u ${url} \
                -mr "alert(1)" \
                -t 1000 \
                -o "${folder}/V18_xss/_ffuf.txt"
            ffuf \
                -w ${TOOLS_PATH}/fuzzers/xss_url_encoded.txt:FUZZ \
                -u ${url} \
                -mr "alert(1)" \
                -t 1000 \
                -o "${folder}/V18_xss/_ffuf.txt"
            cat "${folder}/V18_xss/_ffuf.txt" \
                | jq ".results[].url" \
                | tr -d '"' \
                >> "${folder}/V18_xss/ffuf.txt"
            rm "${folder}/V18_xss/_ffuf.txt"
        done
    fi
}

V18_XSS_DALFOX() {
    stage="V18_XSS_DALFOX"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V18_xss" ]]; then
        mkdir -p "${folder}/V18_xss"
    fi
    if [[ -e "${folder}/V18_xss/gxss.txt" ]]; then
        dalfox file \
            "${folder}/V18_xss/gxss.txt" \
            -w 100 \
            -o "${folder}/V18_xss/dalfox.txt"
    fi
}

V18_XSS_XSSTRIKE() {
    stage="V18_XSS_XSSTRIKE"
    banner "VULNERABILITIES - ${stage}"
    source ${TOOLS_PATH}/virtual_environments/xsstrike_env/bin/activate
    cd ${TOOLS_PATH}/XSStrike
    if [[ ! -d "${folder}/V18_xss" ]]; then
        mkdir -p "${folder}/V18_xss"
    fi
    if [[ -e "${folder}/V18_xss/gxss.txt" ]]; then
        #Scanning main domains
        for subdomain in $(\
            cat "${folder}/V18_xss/gxss.txt"); do
            echo "XSSTRIKE: ${subdomain}"
            python3 xsstrike.py \
                -u ${subdomain} \
                --crawl -l 5 \
                -t 1000
        done | tee -a "${folder}/V18_xss/xsstrike.txt"
        #Filter the txt output, clean the garbage
        #DO IT HERE
    fi
    deactivate
}

V19_TEMPLATE_INJECTION_TINJA() {
    stage="V19_TEMPLATE_INJECTION_TINJA"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V19_template_injection" ]]; then
        mkdir -p "${folder}/V19_template_injection"
    fi
    if [[ -e "${rec_folder}/requests_with_parameters.txt" ]]; then
        TInjA url \
            -u "file:${rec_folder}/requests_with_parameters.txt" \
            --csti
    fi | tee -a "${folder}/V19_template_injection/tinja.txt"
}

V19_TEMPLATE_INJECTION_SSTIMAP() {
    stage="V19_TEMPLATE_INJECTION_SSTIMAP"
    banner "VULNERABILITIES - ${stage}"
    source ${TOOLS_PATH}/virtual_environments/sstimap_env/bin/activate
    cd ${TOOLS_PATH}/SSTImap
    if [[ ! -d "${folder}/V19_template_injection/sstimap" ]]; then
        mkdir -p "${folder}/V19_template_injection/sstimap"
    fi
    if [[ -e "${rec_folder}/requests_with_parameters.txt" ]]; then
        length=$(cat "${rec_folder}/requests_with_parameters.txt" | wc -l)
        for subdomain in $(\
            cat "${rec_folder}/requests_with_parameters.txt"); do
            index=$((${index} + 1))
            zeros_left=$(\
                python3 -c \
                    "print(len('"${length}"'))")
            index_=$(\
                python3 -c \
                    "print(f'{"${index}":0>"${zeros_left}"}')")
            sleep 1
            echo "SSTIMAP: ${subdomain}"
            python3 sstimap.py \
                -u ${subdomain} \
                | tee -a "${folder}/V19_template_injection/sstimap/${index_}.txt" \
                &
        done
        wait
    fi
    deactivate
}

V20_SSRF_SURF() {
    stage="V20_SSRF_SURF"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V20_ssrf/surf" ]]; then
        mkdir -p "${folder}/V20_ssrf/surf"
        cd "${folder}/V20_ssrf/surf"
    fi
    if [[ -e "${rec_folder}/final_data/final_data_httpx_urls.txt" ]]; then
        surf \
            -l "${rec_folder}/final_data/final_data_httpx_urls.txt" \
            -c 1000
    fi
}

V21_HIDDEN_PARAMETERS_FFUF() {
    stage="V21_HIDDEN_PARAMETERS_ARJUN"
    banner "VULNERABILITIES - ${stage}"  
    if [[ ! -d "${folder}/V21_hidden_parameters" ]]; then
        mkdir -p "${folder}/V21_hidden_parameters"
    fi
    if [[ -e "${rec_folder}/requests_without_parameters.txt" ]]; then
        ffuf \
            -w ${TOOLS_PATH}/SecLists/Discovery/Web-Content/burp-parameter-names.txt:PARAM \
            -w ${rec_folder}/requests_without_parameters.txt:URL \
            -w ${TOOLS_PATH}/fuzzers/hidden_parameter_values.txt:FUZZ \
            -u URL?PARAM=FUZZ \
            -fc 403,404,301 \
            -t 1000 \
            -o "${folder}/V21_hidden_parameters/ffuf.txt"
    fi
}

V21_HIDDEN_PARAMETERS_ARJUN() {
    stage="V21_HIDDEN_PARAMETERS_ARJUN"
    banner "VULNERABILITIES - ${stage}"  
    if [[ ! -d "${folder}/V21_hidden_parameters" ]]; then
        mkdir -p "${folder}/V21_hidden_parameters"
    fi
    if [[ -e "${rec_folder}/final_data/final_data_httpx_urls_noext.txt" ]]; then
        python3 -m arjun \
            -i "${rec_folder}/final_data/final_data_httpx_urls_noext.txt" \
            -t 1000 \
            -w "${TOOLS_PATH}/SecLists/Discovery/Web-Content/burp-parameter-names.txt" \
            -oT "${folder}/V21_hidden_parameters/arjun.txt"
    fi
}

V21_HIDDEN_PARAMETERS_X8() {
    stage="V21_HIDDEN_PARAMETERS_X8"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V21_hidden_parameters" ]]; then
        mkdir -p "${folder}/V21_hidden_parameters"
    fi
    if [[ -e "${rec_folder}/final_data/final_data_httpx_urls_noext.txt" ]]; then
        x8 \
            -u "${rec_folder}/final_data/final_data_httpx_urls_noext.txt" \
            -w "${TOOLS_PATH}/SecLists/Discovery/Web-Content/burp-parameter-names.txt" \
            -W 10 \
            --timeout 3 \
            -o "${folder}/V21_hidden_parameters/x8.txt"
    fi
}

V22_SQL_INJECTION_GHAURI() {
    stage="V22_SQL_INJECTION_GHAURI"
    banner "VULNERABILITIES - ${stage}"
    source ${TOOLS_PATH}/virtual_environments/ghauri_env/bin/activate
    cd ${TOOLS_PATH}/ghauri
    if [[ ! -d "${folder}/V22_sql_injection/ghauri" ]]; then
        mkdir -p "${folder}/V22_sql_injection/ghauri"
    fi
    if [[ -e "${rec_folder}/requests_with_parameters.txt" ]]; then
        length=$(cat "${rec_folder}/requests_with_parameters.txt" | wc -l)
        for subdomain in $(\
            cat "${rec_folder}/requests_with_parameters.txt"); do
            index=$((${index} + 1))
            zeros_left=$(\
                python3 -c \
                    "print(len('"${length}"'))")
            index_=$(\
                python3 -c \
                    "print(f'{"${index}":0>"${zeros_left}"}')")
            #Extract the query string (everything after the ?)
            query_string=$(echo "${subdomain}" \
                | awk -F '?' '{print $2}')
            # Extract parameter names and convert to comma-separated list
            param_list=$(echo "${query_string}" \
                | sed 's/=[^&]*//g' \
                | tr '&' ',')
            sleep 1
            echo "GHAURI: ${subdomain}"
            ghauri \
                -u ${subdomain} \
                -p ${param_list} \
                --threads 50 \
                --dbs \
                --batch \
                | tee -a "${folder}/V22_sql_injection/ghauri/${index_}.txt" \
                &
        done
        wait
    fi
    deactivate
}

V22_SQL_INJECTION_SQLMAP() {
    stage="V22_SQL_INJECTION_SQLMAP"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V22_sql_injection/sqlmap" ]]; then
        mkdir -p "${folder}/V22_sql_injection/sqlmap"
    fi
    if [[ -e "${rec_folder}/requests_with_parameters.txt" ]]; then
        length=$(cat "${rec_folder}/requests_with_parameters.txt" | wc -l)
        for subdomain in $(\
            cat "${rec_folder}/requests_with_parameters.txt"); do
            index=$((${index} + 1))
            zeros_left=$(\
                python3 -c \
                    "print(len('"${length}"'))")
            index_=$(\
                python3 -c \
                    "print(f'{"${index}":0>"${zeros_left}"}')")
            #Extract the query string (everything after the ?)
            query_string=$(echo "${subdomain}" \
                | awk -F '?' '{print $2}')
            # Extract parameter names and convert to comma-separated list
            param_list=$(echo "${query_string}" \
                | sed 's/=[^&]*//g' \
                | tr '&' ',')
            sleep 1
            echo "SQLMAP: ${subdomain}"
            sqlmap \
                -u ${subdomain} \
                -p ${param_list} \
                --tamper=space2comment,between \
                --risk=3 \
                --level=5 \
                --threads 10 \
                --dbs \
                --batch \
                | tee -a "${folder}/V22_sql_injection/sqlmap/${index_}.txt" \
                &
        done
        wait
    fi
}

V23_INFO_DISC_DIRB_FFUF() {
    stage="V23_INFO_DISC_DIRB_FFUF"
    banner "VULNERABILITIES - ${stage}"
    if [[ ! -d "${folder}/V23_information_disclosure" ]]; then
        mkdir -p "${folder}/V23_information_disclosure"
    fi
    if [[ -e "${rec_folder}/subdomains/subdomains_probe.txt" ]]; then
        for subdomain in $(\
            cat "${rec_folder}/subdomains/subdomains_probe.txt"); do
            subdomain_txt=$(echo "${subdomain}" | \
                sed -e 's|^http://||' -e 's|^https://||')
            bruteforce_wordlist="/usr/share/wordlists/dirb/common.txt"
            ffuf \
                -u ${subdomain}/FUZZ \
                -w ${bruteforce_wordlist} \
                -t 1000 \
                -s \
                -ignore-body \
                -timeout 5 \
                -fc 404,403,400,503,401,429,301,302,500,204 \
                -o "${folder}/V23_information_disclosure/dirb_ffuf_${subdomain_txt}.txt"
            cat "${folder}/V23_information_disclosure/dirb_ffuf_${subdomain_txt}.txt" \
                | jq ".results[].url" \
                | tr -d '"' \
                >> "${folder}/V23_information_disclosure/dirb_ffuf.txt"
            rm "${folder}/V23_information_disclosure/dirb_ffuf_${subdomain_txt}.txt"
        done
    fi
}
#--------------------------------------------

SSRF_SEE_SURF() {
    stage="SSRF_SEE_SURF"
    banner "VULNERABILITIES - ${stage}"
    source ${TOOLS_PATH}/virtual_environments/seesurf_env/bin/activate
    cd ${TOOLS_PATH}/See-SURF
    if [[ ! -d "${folder}/005_ssrf" ]]; then
        mkdir -p "${folder}/005_ssrf"
    fi
    if [[ -e "${rec_folder}/final_data_version.txt" ]]; then
        for subdomain in $(\
            cat "${rec_folder}/final_data_version.txt"); do
            python3 see-surf.py \
                -H ${subdomain} \
                -t 100
        done | tee -a "${folder}/005_ssrf/ssrf_see_surf.txt"
    fi
    deactivate
}

#--------------------
while getopts ${optstring} options; do
    case ${options} in
        f)
            folder_init="${OPTARG}"
            folder=${folder_init}/Vulnerabilities
            rec_folder=${folder_init}/Reconnaissance
            if [[ ! -d "${folder}" ]]; then
                mkdir "${folder}"
            fi
            ;;
        a)
            task="${OPTARG}"
            case ${task} in 
                "V01_CORS_MISCONFIGURATION_SPYHUNT")
                    run_task V01_CORS_MISCONFIGURATION_SPYHUNT "V01_CORS_MISCONFIGURATION_SPYHUNT"
                    ;;
                "V01_CORS_CORSY")
                    run_task V01_CORS_CORSY "V01_CORS_CORSY"
                    ;;
                "V02_HOST_HEADER_INJECTION_FFUF")
                    run_task V02_HOST_HEADER_INJECTION_FFUF "V02_HOST_HEADER_INJECTION_FFUF"
                    ;;
                "V02_HOST_HEADER_INJECTION_SPYHUNT")
                    run_task V02_HOST_HEADER_INJECTION_SPYHUNT "V02_HOST_HEADER_INJECTION_SPYHUNT"
                    ;;
                "V02_HOST_HEADER_INJECTION_HEADI")
                    run_task V02_HOST_HEADER_INJECTION_HEADI "V02_HOST_HEADER_INJECTION_HEADI"
                    ;;
                "V03_CSRF_XSRFPROBE")
                    run_task V03_CSRF_XSRFPROBE "V03_CSRF_XSRFPROBE"
                    ;;
                "V04_REQUEST_SMUGGLING_SMUGGLER")
                    run_task V04_REQUEST_SMUGGLING_SMUGGLER "V04_REQUEST_SMUGGLING_SMUGGLER"
                    ;;
                "V04_REQUEST_SMUGGLING_SMUGGLEFUZZ")
                    run_task V04_REQUEST_SMUGGLING_SMUGGLEFUZZ "V04_REQUEST_SMUGGLING_SMUGGLEFUZZ"
                    ;;
                "V05_API_GRAPHQL_ENDPOINTS")
                    run_task V05_API_GRAPHQL_ENDPOINTS "V05_API_GRAPHQL_ENDPOINTS"
                    ;;
                "V05_API_GOCTOPUS")
                    run_task V05_API_GOCTOPUS "V05_API_GOCTOPUS"
                    ;;
                "V05_API_GRAPHW00F")
                    run_task V05_API_GRAPHW00F "V05_API_GRAPHW00F"
                    ;;
                "V05_API_ARJUN")
                    run_task V05_API_ARJUN "V05_API_ARJUN"
                    ;;
                "V13_TAKEOVER_SUBZY")
                    run_task V13_TAKEOVER_SUBZY "V13_TAKEOVER_SUBZY"
                    ;;
                "V13_TAKEOVER_MX_SPF")
                    run_task V13_TAKEOVER_MX_SPF "V13_TAKEOVER_MX_SPF"
                    ;;
                "V16_403_BYPASS_TOOL")
                    run_task V16_403_BYPASS_TOOL "V16_403_BYPASS_TOOL"
                    ;;
                "V16_403_BYPASS_403JUMP")
                    run_task V16_403_BYPASS_403JUMP "V16_403_BYPASS_403JUMP"
                    ;;
                "V17_FAVICON_FAVFREAK")
                    run_task V17_FAVICON_FAVFREAK "V17_FAVICON_FAVFREAK"
                    ;;
                "V17_FAVICON_FAVIRECON")
                    run_task V17_FAVICON_FAVIRECON "V17_FAVICON_FAVIRECON"
                    ;;
                "V18_XSS_DALFOX")
                    run_task V18_XSS_DALFOX "V18_XSS_DALFOX"
                    ;;
                "V18_XSS_XSSTRIKE")
                    run_task V18_XSS_XSSTRIKE "V18_XSS_XSSTRIKE"
                    ;;
                "V18_XSS_GXSS")
                    run_task V18_XSS_GXSS "V18_XSS_GXSS"
                    ;;
                "V19_TEMPLATE_INJECTION_TINJA")
                    run_task V19_TEMPLATE_INJECTION_TINJA "V19_TEMPLATE_INJECTION_TINJA"
                    ;;
                "V19_TEMPLATE_INJECTION_SSTIMAP")
                    run_task V19_TEMPLATE_INJECTION_SSTIMAP "V19_TEMPLATE_INJECTION_SSTIMAP"
                    ;;
                "V20_SSRF_SURF")
                    run_task V20_SSRF_SURF "V20_SSRF_SURF"
                    ;;
                "V21_HIDDEN_PARAMETERS_FFUF")
                    run_task V21_HIDDEN_PARAMETERS_FFUF "V21_HIDDEN_PARAMETERS_FFUF"
                    ;;
                "V21_HIDDEN_PARAMETERS_ARJUN")
                    run_task V21_HIDDEN_PARAMETERS_ARJUN "V21_HIDDEN_PARAMETERS_ARJUN"
                    ;;
                "V21_HIDDEN_PARAMETERS_X8")
                    run_task V21_HIDDEN_PARAMETERS_X8 "V21_HIDDEN_PARAMETERS_X8"
                    ;;
                "V22_SQL_INJECTION_GHAURI")
                    run_task V22_SQL_INJECTION_GHAURI "V22_SQL_INJECTION_GHAURI"
                    ;;
                "V22_SQL_INJECTION_SQLMAP")
                    run_task V22_SQL_INJECTION_SQLMAP "V22_SQL_INJECTION_SQLMAP"
                    ;;
                "V23_INFO_DISC_DIRB_FFUF")
                    run_task V23_INFO_DISC_DIRB_FFUF "V23_INFO_DISC_DIRB_FFUF"
                    ;;
                "SSRF_SEE_SURF")
                    run_task SSRF_SEE_SURF "SSRF_SEE_SURF"
                    ;;
                esac
            ;;
        h)
            help_function
            exit 0
            ;;
        ?)
            echo "Error"
            exit 1
            ;;
        esac
    done